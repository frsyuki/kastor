AC_INIT(src/logic/server/main.cc)
AC_CONFIG_AUX_DIR(ac)
AM_INIT_AUTOMAKE(kastor, 0.1.2)
AC_CONFIG_HEADER(config.h)


AC_SUBST(CFLAGS)
if test "" = "$CFLAGS"; then
	CFLAGS="-O4"
fi
CFLAGS="-O4 -Wall $CFLAGS"


AC_SUBST(CXXFLAGS)
if test "" = "$CXXFLAGS"; then
	CXXFLAGS="-O4"
fi
CXXFLAGS="-O4 -Wall $CXXFLAGS"


AC_CHECK_PROG(RUBY, ruby, ruby)
if test "x$RUBY" = x; then
	AC_MSG_ERROR([cannot find ruby. Ruby is needed to build.])
fi

#AC_CHECK_PROG(ERB, erb, erb)
#if test "x$ERB" = x; then
#	AC_MSG_ERROR([cannot find erb. Ruby is needed to build.])
#fi

#AC_CHECK_PROG(RAGEL, ragel, ragel)
#if test "x$RAGEL" = x; then
#	AC_MSG_ERROR([cannot find ragel. Ragel is needed to build.])
#fi


AC_PROG_CC
AC_PROG_CXX

AC_PROG_LIBTOOL
AM_PROG_AS
AM_PROG_CC_C_O


#AC_ARG_WITH([msgpack],
#	AS_HELP_STRING([--with-msgpack=DIR],
#				   [specify the root directory for msgpack library]),
#	[msgpack_path="$withval"], [])
#if test "$msgpack_path" != ""; then
#	CXXFLAGS="$CXXFLAGS -I$msgpack_path/include"
#	CFLAGS="$CFLAGS -I$msgpack_path/include"
#	LDFLAGS="$LDFLAGS -L$msgpack_path/lib"
#fi



AC_ARG_WITH([tc],
	AS_HELP_STRING([--with-tc@<:@=DIR@:>@],
				   [specify the root directory for Tokyo Cabinet library]),
	[tc_path="$withval"], [])
if test "$tc_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tc_path/include"
	CFLAGS="$CFLAGS -I$tc_path/include"
	LDFLAGS="$LDFLAGS -L$tc_path/lib"
fi



AC_MSG_CHECKING([if tcmalloc is enabled])
AC_ARG_WITH([tcmalloc],
	AS_HELP_STRING([--with-tcmalloc@<:@=DIR@:>@],
				   [link libtcmalloc]),
	[with_tcmalloc="$withval"], [with_tcmalloc="no"])
AC_MSG_RESULT($with_tcmalloc)
if test "$with_tcmalloc" != "no"; then
	if test "$with_tcmalloc" != "yes"; then
		LDFLAGS="$LDFLAGS -L$with_tcmalloc/lib"
		LDFLAGS="$LDFLAGS -L$with_tcmalloc/lib64"
	fi
	AC_CHECK_LIB(tcmalloc,malloc,,
		AC_MSG_ERROR([Can't find tcmalloc library]))
fi


AC_CHECK_LIB(stdc++, main)

AC_CHECK_LIB(pthread,pthread_create,,
	AC_MSG_ERROR([Can't find pthread library]))

#AC_CHECK_LIB(z,deflate,,
#	AC_MSG_ERROR([Can't find zlib library]))

#AC_CHECK_HEADERS(openssl/sha.h,,
#	AC_MSG_ERROR([Can't find openssl header]))

#AC_CHECK_LIB(crypto,SHA1,,
#	AC_MSG_ERROR([Can't find openssl library]))

#AC_CHECK_LIB(msgpack,main,,
#	AC_MSG_ERROR([Can't find msgpack library]))

AC_CHECK_HEADERS(tchdb.h,,
	AC_MSG_ERROR([Can't find tokyo cabinet header]))
AC_CHECK_LIB(tokyocabinet,tchdbget,,
	AC_MSG_ERROR([Can't find tokyocabinet library]))


AC_MSG_CHECKING([if debug option is enabled])
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--disable-debug],
				   [disable assert macros and omit -g option.]) )
if test "$enable_debug" != "no"; then
	CXXFLAGS="$CXXFLAGS -g"
	CFLAGS="$CFLAGS -g"
else
	CXXFLAGS="$CXXFLAGS -DNDEBUG"
	CFLAGS="$CFLAGS -DNDEBUG"
fi
AC_MSG_RESULT($enable_debug)


#AC_MSG_CHECKING([if trace message is enabled])
#AC_ARG_ENABLE(trace,
#	AS_HELP_STRING([--enable-trace], [enable trace messages.]) )
#if test "$enable_trace" = "yes"; then
#	CXXFLAGS="$CXXFLAGS -DMLOGGER_LEVEL=0"
#	CFLAGS="$CFLAGS -DMLOGGER_LEVEL=0"
#else
#	CXXFLAGS="$CXXFLAGS -DMLOGGER_LEVEL=2"
#	CFLAGS="$CFLAGS -DMLOGGER_LEVEL=2"
#fi
#AC_MSG_RESULT($enable_trace)


AC_OUTPUT([src/mp/Makefile
		   src/mpsrc/Makefile
		   src/ccf/Makefile
		   src/Makefile
		   src/logic/Makefile
		   Makefile])

